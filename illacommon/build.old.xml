<?xml version="1.0" encoding="utf-8"?>
<!-- This file is part of the Illarion Common Library.

Copyright Â© 2011 - Illarion e.V.

The Illarion Common Library is free software: you can redistribute i
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the License,
or (at your option) any later version.

The Illarion Common Library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
the Illarion Common Library. If not, see <http://www.gnu.org/licenses/>.
-->
<project name="Illarion Common" default="build_common" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		   Build the collection of the common files into their jar file.
	</description>

	<import file="../illacommon/build_include.xml" />

	<property name="src" location="${common}/src" />
	<property name="classes" location="${common}/antclasses" />
	<property name="javadoc" location="${common}/javadoc" />
	<property name="jar" location="${common}/${common.jar}" />
	<property name="native" location="${common}/native" />
	<property name="resources" location="${common}/rsc" />
	<property name="signedresources" location="${common}/rsc/sign" />
	<property name="libs" location="${common}/lib" />
	<property name="signedlibs" location="${common}/lib/signed" />
	<property name="test" location="${common}/test" />
	<property name="ivy" location="${common}/ivy.xml" />

	<!-- - - - - - - - - - - - - - PUBLIC  TARGETS - - - - - - - - - - - - - -->
	<target name="compile" depends="welcome,retrieve-deps" description="Compile the buildtool">
		<ivy:resolve file="${ivy}" />

		<mkdir dir="${classes}" />
		<javac srcdir="${src}" destdir="${classes}" source="${source.version}" target="${target.version}" encoding="${source.encoding}" compiler="${build.compiler}" debug="${build.debug}" debuglevel="${build.debuglevel}" includeantruntime="false" includejavaruntime="false">
			<classpath refid="illarion.common.classpath"/>
		</javac>
		<jar jarfile="${jar}" basedir="${classes}" includes="illarion/common/**">
			<metainf dir="${build}">
				<include name="*.txt" />
			</metainf>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${illarion.vendor}" />
				<attribute name="Implementation-Title" value="${common.name}" />
				<attribute name="Implementation-Version" value="${common.version}" />
			</manifest>
		</jar>
	</target>

	<target name="publish" depends="compile,deliver,check_optional_dirs" description="Create all components of the buildtool that are needed for publishing it" if="${keys.exist}">
		<mkdir dir="${devrepo}/${illarion.organisation}/${common.artifact}/jars" />
		<mkdir dir="${devrepo}/${illarion.organisation}/${common.artifact}/sources/" />
		<mkdir dir="${devrepo}/${illarion.organisation}/${common.artifact}/javadocs/" />

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" storetype="${storetype}" jar="${jar}" />
		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}" jar="${jar}" />
		<move file="${jar}" tofile="${devrepo}/${illarion.organisation}/${common.artifact}/jars/${common.artifact}-${common.version}.jar" overwrite="yes" />
		<zip destfile="${devrepo}/${illarion.organisation}/${common.artifact}/sources/${common.artifact}-${common.version}.zip" basedir="${src}">
			<include name="*.*" />
			<include name="**/*.*" />
		</zip>

		<mkdir dir="${javadoc}" />
		<javadoc sourcepath="${src}" source="${source.version}" destdir="${javadoc}">
			<classpath refid="illarion.common.classpath" />
		</javadoc>
		<zip destfile="${devrepo}/${illarion.organisation}/${common.artifact}/javadocs/${common.artifact}-${common.version}.zip" basedir="${javadoc}">
			<include name="*.*" />
			<include name="**/*.*" />
		</zip>
	</target>

	<target name="upload" depends="publish" description="Upload the newly build version of the buildtool" if="${keys.exist}">
		<ivy:publish artifactspattern="${devrepo}/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]" resolver="illarion-sftp" pubrevision="${common.version}" status="milestone" overwrite="true" />
		<echo message="project ${common.name} released with version ${common.version}" />
	</target>
	
	<!-- - - - - - - - - - - - - - PRIVATE TARGETS - - - - - - - - - - - - - -->
	<!-- Don't call them! Ever! I mean it. Nothing good comes from it.       -->
	<target name="resolve-deps" depends="init-ivy">
		<!-- Resolve the dependencies -->
		<ivy:resolve file="${ivy}" refresh="true" />
		<ivy:cachepath pathid="illarion.common.classpath" conf="default" />
	</target>

	<target name="retrieve-deps" depends="resolve-deps">
		<!-- Download the dependencies -->
		<ivy:retrieve pattern="${libs}/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]" />
		<ivy:report todir="report" />
	</target>

	<target name="deliver" depends="resolve-deps">
		<!-- Create the ivy.xml file for the buildtool -->
		<ivy:deliver conf="*(public)" deliverpattern="${devrepo}/[organisation]/[module]/ivys/[artifact]-[revision].[ext]" />
	</target>

	<target name="welcome">
		<echo>${ant.project.name} is now building.</echo>
		<echo>using ${ant.version}</echo>
		<echo>on Java ${java.version} and ${os.name} (${os.arch})</echo>
	</target>

	<target name="build_common" description="build common jar file" depends="init, compile_common">
		<move file="${jar}" tofile="${common.bin}" />
		<delete file="${jar}" />
	</target>

	<target name="build_common_res" description="create the resource of the common library" depends="check_optional_dirs, init, buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedcompiled}" usepack200="true">
			<filelist dir="${compiled}">
				<file name="${common.jar}" />
			</filelist>
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedcompiled}" storetype="${storetype}">
			<path>
				<filelist dir="${signedcompiled}">
					<file name="${common.jar}" />
				</filelist>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedcompiled}">
					<file name="${common.jar}" />
				</filelist>
			</path>
		</verifyjar>

		<resourcebuild target="${common.res.deploy}" usepack200="true">
			<filelist dir="${signedcompiled}">
				<file name="${common.jar}" />
			</filelist>
		</resourcebuild>
	</target>

	<target name="prepare_javolution" description="prepare the JAVOLUTION bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="javolution" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="javolution.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="javolution.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/javolution.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="javolution.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_jogl" description="prepare the JOGL bundle" depends="check_optional_dirs,init_libs,buildTasks,native_build_pattern" if="keys.exist">
		<patternset id="jogl.natives">
			<include name="gluegen-rt-natives*.jar" />
			<include name="jogl-all-natives*.jar" />
		</patternset>

		<delete>
			<fileset dir="${signedlibs}">
				<include name="gluegen-rt.jar" />
				<include name="jogl.all.jar" />
			</fileset>
		</delete>


		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="jogl" />
			<fileset dir="${jogl.dir}">
				<patternset refid="jogl.natives" />
			</fileset>
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="jogl.pattern" />
				</fileset>
				<fileset dir="${signedlibs}">
					<patternset refid="jogl.natives" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="jogl.pattern" />
				</fileset>
				<fileset dir="${signedlibs}">
					<patternset refid="jogl.natives" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/jogl-windows-i586.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jogl.pattern" />
				<patternset refid="only.windows.32" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="jogl.natives" />
				<patternset refid="only.windows.32" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/jogl-windows-amd64.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jogl.pattern" />
				<patternset refid="only.windows.64" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="jogl.natives" />
				<patternset refid="only.windows.64" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/jogl-linux-i586.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jogl.pattern" />
				<patternset refid="only.linux.32" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="jogl.natives" />
				<patternset refid="only.linux.32" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/jogl-linux-amd64.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jogl.pattern" />
				<patternset refid="only.linux.64" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="jogl.natives" />
				<patternset refid="only.linux.64" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/jogl-macosx-universal.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jogl.pattern" />
				<patternset refid="only.macosx" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="jogl.natives" />
				<patternset refid="only.macosx" />
			</nativefileset>
		</resourcebuild>
	</target>

	<target name="prepare_jsyntaxpane" description="prepare the JSYNTAXPANE bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="jsyntaxpane" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="jsyntaxpane.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="jsyntaxpane.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/jsyntaxpane.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jsyntaxpane.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_jgraph" description="prepare the JGraph bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="jgraph" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="jgraph.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="jgraph.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/jgraph.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="jgraph.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_log4j" description="prepare the LOG4J bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="log4j" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="log4j.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="log4j.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/log4j.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="log4j.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_lwjgl" description="prepare the LWJGL bundle" depends="check_optional_dirs,init_libs,buildTasks,native_build_pattern" if="keys.exist">
		<jar jarfile="${common}/lwjgl-natives-windows-i586.jar">
			<fileset dir="${native}/win32">
				<include name="lwjgl.dll" />
				<include name="OpenAL32.dll" />
				<include name="jinput-dx8.dll" />
				<include name="jinput-raw.dll" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives Windows 32bit" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<jar jarfile="${common}/lwjgl-natives-windows-amd64.jar">
			<fileset dir="${native}/win64">
				<include name="lwjgl64.dll" />
				<include name="OpenAL64.dll" />
				<include name="jinput-dx8_64.dll" />
				<include name="jinput-raw_64.dll" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives Windows 64bit" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<jar jarfile="${common}/lwjgl-natives-linux-i586.jar">
			<fileset dir="${native}/linux32">
				<include name="liblwjgl.so" />
				<include name="libopenal.so" />
				<include name="libjinput-linux.so" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives Linux 32bit" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<jar jarfile="${common}/lwjgl-natives-linux-amd64.jar">
			<fileset dir="${native}/linux64">
				<include name="liblwjgl64.so" />
				<include name="libopenal64.so" />
				<include name="libjinput-linux64.so" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives Linux 64bit" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<jar jarfile="${common}/lwjgl-natives-macosx-universal.jar">
			<fileset dir="${native}/macosx">
				<include name="liblwjgl.jnilib" />
				<include name="openal.jnilib" />
				<include name="libjinput-osx.so" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives MacOS X" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<jar jarfile="${common}/lwjgl-natives-solaris-i586.jar">
			<fileset dir="${native}/solaris32">
				<include name="liblwjgl.so" />
				<include name="libopenal.so" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives Solaris 32bit" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<jar jarfile="${common}/lwjgl-natives-solaris-amd64.jar">
			<fileset dir="${native}/solaris64">
				<include name="liblwjgl64.so" />
				<include name="libopenal64.so" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="LWJGL Team" />
				<attribute name="Implementation-Title" value="LWJGL Natives Solaris 64bit" />
				<attribute name="Implementation-Version" value="2.6" />
			</manifest>
		</jar>

		<patternset id="lwjgl.natives">
			<include name="lwjgl-natives-*.jar" />
		</patternset>

		<move todir="${lwjgl.dir}">
			<fileset dir="${common}">
				<patternset refid="lwjgl.natives" />
			</fileset>
		</move>

		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="lwjgl" />
			<fileset dir="${lwjgl.dir}">
				<patternset refid="lwjgl.natives" />
			</fileset>
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="lwjgl.pattern" />
				</fileset>
				<fileset dir="${signedlibs}">
					<patternset refid="lwjgl.natives" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="lwjgl.pattern" />
				</fileset>
				<fileset dir="${signedlibs}">
					<patternset refid="lwjgl.natives" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/lwjgl-windows-i586.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.windows.32" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.windows.32" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/lwjgl-windows-amd64.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.windows.64" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.windows.64" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/lwjgl-linux-i586.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.linux.32" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.linux.32" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/lwjgl-linux-amd64.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.linux.64" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.linux.64" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/lwjgl-macosx-universal.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.macosx" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.macosx" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/lwjgl-solaris-i586.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.sunos.32" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.sunos.32" />
			</nativefileset>
		</resourcebuild>

		<resourcebuild target="${setuplib}/lwjgl-solaris-amd64.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="lwjgl.pattern" />
				<patternset refid="only.sunos.64" />
			</fileset>
			<nativefileset dir="${signedlibs}">
				<patternset refid="lwjgl.natives" />
				<patternset refid="only.sunos.64" />
			</nativefileset>
		</resourcebuild>
	</target>

	<target name="prepare_substance" description="prepare the SUBSTANCE bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<property name="use.pack200" value="false" />

		<resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
			<fileset refid="substance" />
			<fileset refid="substance-flamingo" />
			<fileset refid="flamingo" />
			<fileset refid="trident" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="substance.pattern" />
					<patternset refid="substance-flamingo.pattern" />
					<patternset refid="flamingo.pattern" />
					<patternset refid="trident.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="substance.pattern" />
					<patternset refid="substance-flamingo.pattern" />
					<patternset refid="flamingo.pattern" />
					<patternset refid="trident.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/substance.illares" usepack200="${use.pack200}">
			<fileset dir="${signedlibs}">
				<patternset refid="substance.pattern" />
				<patternset refid="substance-flamingo.pattern" />
				<patternset refid="flamingo.pattern" />
				<patternset refid="trident.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_tabsplitter" description="prepare the TABSPLITTER bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="tabsplitter" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="tabsplitter.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="tabsplitter.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/tabsplitter.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="tabsplitter.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_trove" description="prepare the TROVE bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="trove" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="trove.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="trove.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/trove.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="trove.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="prepare_vorbisspi" description="prepare the TROVE bundle" depends="check_optional_dirs,init_libs,buildTasks" if="keys.exist">
		<resourceprepare targetdir="${signedlibs}" usepack200="true">
			<fileset refid="vorbisspi" />
			<fileset refid="jorbis" />
			<fileset refid="tritonus" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="vorbisspi.pattern" />
					<patternset refid="jorbis.pattern" />
					<patternset refid="tritonus.pattern" />
				</fileset>
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<fileset dir="${signedlibs}">
					<patternset refid="vorbisspi.pattern" />
					<patternset refid="jorbis.pattern" />
					<patternset refid="tritonus.pattern" />
				</fileset>
			</path>
		</verifyjar>

		<resourcebuild target="${setuplib}/vorbisspi.illares" usepack200="true">
			<fileset dir="${signedlibs}">
				<patternset refid="vorbisspi.pattern" />
				<patternset refid="jorbis.pattern" />
				<patternset refid="tritonus.pattern" />
			</fileset>
		</resourcebuild>
	</target>

	<target name="init_libs">
		<mkdir dir="${setuplib}" />
		<mkdir dir="${signedlibs}" />
		<mkdir dir="${signedresources}" />
	</target>

	<target name="download_libraries" description="download and setup all the libraries needed">
		<copy file="${common}/libs-all.zip" tofile="${common}/libs-all-old.zip" failonerror="no" preservelastmodified="on" />
		<get dest="${common}/libs-all.zip" src="http://illarion.org/media/java/libs-all.zip" verbose="false" usetimestamp="true" ignoreerrors="true" />
		<antcall target="extract_libs" />
		<delete file="${common}/libs-all-old.zip" />
	</target>

	<target name="check_libs_uptodate">
		<uptodate property="libs.uptodate" srcfile="${common}/libs-all.zip" targetfile="${common}/libs-all-old.zip" />
	</target>

	<target name="extract_libs" depends="check_libs_uptodate" unless="libs.uptodate">
		<delete dir="${signedlibs}" failonerror="false" />
		<delete dir="${libs}" failonerror="false" />
		<mkdir dir="${libs}" />
		<unzip dest="${libs}" src="${common}/libs-all.zip" overwrite="true" />
		<antcall target="extract_natives" />
	</target>

	<target name="extract_natives">
		<mkdir dir="${native}" />
		<mkdir dir="${native}/linux32" />
		<mkdir dir="${native}/linux64" />
		<mkdir dir="${native}/macosx" />
		<mkdir dir="${native}/solaris32" />
		<mkdir dir="${native}/solaris64" />
		<mkdir dir="${native}/win32" />
		<mkdir dir="${native}/win64" />

		<unjar dest="${native}/linux32" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-linux-i586.jar" />
			</fileset>
		</unjar>

		<unjar dest="${native}/linux64" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-linux-amd64.jar" />
			</fileset>
		</unjar>

		<unjar dest="${native}/macosx" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-macosx-universal.jar" />
			</fileset>
		</unjar>

		<unjar dest="${native}/solaris32" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-solaris-i586.jar" />
			</fileset>
		</unjar>

		<unjar dest="${native}/solaris64" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-solaris-amd64.jar" />
			</fileset>
		</unjar>

		<unjar dest="${native}/win32" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-windows-i586.jar" />
			</fileset>
		</unjar>

		<unjar dest="${native}/win64" overwrite="true">
			<patternset>
				<exclude name="META-INF/" />
			</patternset>
			<fileset dir="${common}/lib">
				<exclude name="signed/" />
				<include name="**/*-windows-amd64.jar" />
			</fileset>
		</unjar>
	</target>

	<target name="download_resources" description="Download prebuild resources">
		<get dest="${common}/rsc-all.zip" src="http://illarion.org/media/java/rsc-all.zip" verbose="false" ignoreerrors="true" />
		<antcall target="extract_resources" />
		<delete file="${common}/rsc-all.zip" />
	</target>

	<target name="resource_file_present">
		<available file="${common}/rsc-all.zip" property="rsc_all.avaiable" />
	</target>

	<target name="extract_resources" depends="resource_file_present" if="${rsc_all.avaiable}">
		<mkdir dir="${resources}" />
		<unzip dest="${resources}" src="${common}/rsc-all.zip" overwrite="true" />
	</target>

	<target name="create_library_bundle" description="Create the library ZIP-File that is downloaded during the build">
		<delete file="${common}/libs-all.zip" failonerror="false" />
		<zip destfile="${common}/libs-all.zip" update="false" compress="true">
			<fileset dir="${libs}">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
				<include name="**/*.txt" />
				<exclude name="signed/**" />
			</fileset>
		</zip>
	</target>

	<target name="create_resource_bundle" description="Create the ZIP-File of the prepared resources that are deployed in case the required parts of the build environment to create them are missing.">
		<delete file="${common}/rsc-all.zip" failonerror="false" />
		<zip destfile="${common}/rsc-all.zip" update="false" compress="false">
			<fileset dir="${resources}">
				<include name="*.jar" />
				<exclude name="signed/**" />
			</fileset>
		</zip>
	</target>

	<target name="compile_common">
		<delete dir="${classes}" />
		<mkdir dir="${classes}" />
		<javac srcdir="${src}" destdir="${classes}" source="${source.version}" target="${target.version}" encoding="${source.encoding}" compiler="${build.compiler}" debug="${build.debug}" debuglevel="${build.debuglevel}">
			<classpath>
				<fileset refid="log4j" />
				<fileset refid="swt" />
				<fileset refid="javolution" />
				<fileset refid="trove" />
				<fileset refid="tabsplitter" />
				<fileset refid="lzma" />
				<fileset refid="slick" />
				<fileset refid="nifty" />
				<pathelement path="${java.home}/lib" />
			</classpath>
		</javac>
		<jar jarfile="${jar}" basedir="${classes}" includes="illarion/common/**">
			<metainf dir="${common}">
				<include name="*.txt" />
			</metainf>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${common.vendor}" />
				<attribute name="Implementation-Title" value="${common.name}" />
				<attribute name="Implementation-Version" value="${common.version}" />
			</manifest>
		</jar>
		<jar jarfile="${jar}" basedir="${src}" includes="public.key" update="true" index="${build.index}" />
		<delete dir="${classes}" />
	</target>

	<target name="rsc_gui" description="Build the GUI resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert target="${resources}/rsc_gui.tmp">
			<fileset dir="${config}">
				<include name="data/gui/*.png" />
				<include name="data/gui/**/*.png" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<texconvert target="${resources}/rsc_fonts.tmp">
			<fileset dir="${config}">
				<include name="data/fonts/*.png" />
				<include name="data/fonts/**/*.png" />
				<include name="data/fonts/**/*.illaFont" />
				<include name="data/fonts/*.TTF" />
				<include name="data/fonts/*.ttf" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<jar destfile="${resources}/rsc_gui.jar">
			<zipfileset src="${resources}/rsc_gui.tmp" />
			<zipfileset src="${resources}/rsc_fonts.tmp" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</jar>

		<delete>
			<fileset dir="${resources}">
				<include name="rsc_*.tmp" />
			</fileset>
		</delete>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_gui.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_gui.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_gui.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_gui.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_gui.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_books" description="Build the book resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert generatetransparency="false" target="${resources}/rsc_books.jar">
			<fileset dir="${config}">
				<include name="data/books/*.xml" />
				<include name="data/books/**/*.xml" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_books.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_books.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_books.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_books.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_books.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_items" description="Build the Item resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert target="${resources}/rsc_items.jar">
			<fileset dir="${config}">
				<include name="data/items/*.png" />
				<include name="data/items/**/*.png" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_items.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_items.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_items.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_items.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_items.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_tiles" description="Build the Tiles resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert target="${resources}/rsc_tiles.jar">
			<fileset dir="${config}">
				<include name="data/tiles/*.png" />
				<include name="data/tiles/**/*.png" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_tiles.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_tiles.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_tiles.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_tiles.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_tiles.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_chars" description="Build the Chars resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert target="${resources}/rsc_chars.jar">
			<fileset dir="${config}">
				<include name="data/chars/*.png" />
				<include name="data/chars/**/*.png" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_chars.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_chars.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_chars.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_chars.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_chars.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_effects" description="Build the Effects resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert target="${resources}/rsc_effects.jar">
			<fileset dir="${config}">
				<include name="data/effects/*.png" />
				<include name="data/effects/**/*.png" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_effects.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_effects.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_effects.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_effects.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_effects.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_sound" description="Build the Sound resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<jar destfile="${resources}/rsc_sounds.jar" level="4">
			<fileset dir="${config}">
				<include name="data/sounds/*.ogg" />
				<include name="data/music/*.ogg" />
				<exclude name="**/.svn/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</jar>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_sounds.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_sounds.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_sounds.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_sounds.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_sounds.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_tables" description="Build the Table resources" depends="check_optional_dirs,init_libs,buildTasks" if="keys.config.exist">
		<texconvert target="${resources}/rsc_tables.jar" privateKey="${sign}/private.key">
			<filelist dir="${config}">
				<file name="data/Books.tbl" />
				<file name="data/Songs.tbl" />
				<file name="data/Sounds.tbl" />
				<file name="data/Effects.tbl" />
				<file name="data/Cloth.tbl" />
				<file name="data/Chars.tbl" />
				<file name="data/Overlays.tbl" />
				<file name="data/Tiles.tbl" />
				<file name="data/Gui.tbl" />
				<file name="data/Runes.tbl" />
				<file name="data/Items.tbl" />
			</filelist>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${resources.vendor}" />
				<attribute name="Implementation-Title" value="${resources.name}" />
				<attribute name="Implementation-Version" value="${resources.version}" />
			</manifest>
		</texconvert>

		<resourceprepare targetdir="${signedresources}" usepack200="false">
			<filelist dir="${resources}" files="rsc_tables.jar" />
		</resourceprepare>

		<signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedresources}" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_tables.jar" />
			</path>
		</signjar>

		<verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no" storetype="${storetype}">
			<path>
				<filelist dir="${signedresources}" files="rsc_tables.jar" />
			</path>
		</verifyjar>

		<resourcebuild target="${setup}/rsc_tables.illares" usepack200="false">
			<filelist dir="${signedresources}" files="rsc_tables.jar" />
		</resourcebuild>
	</target>

	<target name="rsc_manual" description="Build the Manual resources" depends="init_libs,buildTasks">
		<copy todir="${resources}">
			<filelist dir="${client}">
				<file name="manual_de.pdf" />
				<file name="manual_en.pdf" />
			</filelist>
		</copy>
		<resourcebuild target="${setup}/manual.illares" usepack200="false">
			<filelist dir="${client}">
				<file name="manual_de.pdf" />
				<file name="manual_en.pdf" />
			</filelist>
		</resourcebuild>
	</target>
</project>